@page "/fetchdata"

@using RecipeLewis.Data
@inject RecipeService RecipeService
@inject ILogger<Recipe> logger
@inject NotificationService NotificationService

<h1>Recipes 123</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <table class="table">
    <thead>
      <tr>
        <th>Date</th>
        <th>Title</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var forecast in forecasts)
      {
        <tr>
          <td>@forecast.Date.ToShortDateString()</td>
          <td>@forecast.Title</td>
        </tr>
      }
    </tbody>
  </table>
}

@code {
  private List<Recipe> forecasts;

  protected override async Task OnInitializedAsync()
  {
    try
    {

      //var logger = LoggerFactory.CreateLogger<Recipe>();
      //logger.LogDebug("Forecasts init!");
      Console.WriteLine("Forecasts init");
      //forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
      forecasts = await RecipeService.GetForecastsAsync();
      Console.WriteLine("Forecasts finished");
      Console.WriteLine("Total forecasts: " + forecasts.Count);
      NotificationService.Notify(NotificationSeverity.Success, "Saved successfully");
    }
    catch (Exception ex)
    {
      NotificationService.Notify(NotificationSeverity.Error, "Failed", ex.Message, 6000);

    }

  }
}
